// Code generated by protoc-gen-go.
// source: rankserver.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	rankserver.proto

It has these top-level messages:
	Ranking
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Ranking struct {
}

func (m *Ranking) Reset()         { *m = Ranking{} }
func (m *Ranking) String() string { return proto1.CompactTextString(m) }
func (*Ranking) ProtoMessage()    {}

type Ranking_SetName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Ranking_SetName) Reset()         { *m = Ranking_SetName{} }
func (m *Ranking_SetName) String() string { return proto1.CompactTextString(m) }
func (*Ranking_SetName) ProtoMessage()    {}

type Ranking_UserId struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *Ranking_UserId) Reset()         { *m = Ranking_UserId{} }
func (m *Ranking_UserId) String() string { return proto1.CompactTextString(m) }
func (*Ranking_UserId) ProtoMessage()    {}

type Ranking_Change struct {
	UserId int32  `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Score  int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Ranking_Change) Reset()         { *m = Ranking_Change{} }
func (m *Ranking_Change) String() string { return proto1.CompactTextString(m) }
func (*Ranking_Change) ProtoMessage()    {}

type Ranking_NullResult struct {
}

func (m *Ranking_NullResult) Reset()         { *m = Ranking_NullResult{} }
func (m *Ranking_NullResult) String() string { return proto1.CompactTextString(m) }
func (*Ranking_NullResult) ProtoMessage()    {}

type Ranking_Range struct {
	StartNo int32  `protobuf:"varint,1,opt,name=start_no" json:"start_no,omitempty"`
	EndNo   int32  `protobuf:"varint,2,opt,name=end_no" json:"end_no,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Ranking_Range) Reset()         { *m = Ranking_Range{} }
func (m *Ranking_Range) String() string { return proto1.CompactTextString(m) }
func (*Ranking_Range) ProtoMessage()    {}

type Ranking_RankList struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids" json:"user_ids,omitempty"`
	Scores  []int32 `protobuf:"varint,2,rep,packed,name=scores" json:"scores,omitempty"`
}

func (m *Ranking_RankList) Reset()         { *m = Ranking_RankList{} }
func (m *Ranking_RankList) String() string { return proto1.CompactTextString(m) }
func (*Ranking_RankList) ProtoMessage()    {}

type Ranking_Users struct {
	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids" json:"user_ids,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Ranking_Users) Reset()         { *m = Ranking_Users{} }
func (m *Ranking_Users) String() string { return proto1.CompactTextString(m) }
func (*Ranking_Users) ProtoMessage()    {}

type Ranking_UserList struct {
	Ranks  []int32 `protobuf:"varint,1,rep,packed,name=ranks" json:"ranks,omitempty"`
	Scores []int32 `protobuf:"varint,2,rep,packed,name=scores" json:"scores,omitempty"`
}

func (m *Ranking_UserList) Reset()         { *m = Ranking_UserList{} }
func (m *Ranking_UserList) String() string { return proto1.CompactTextString(m) }
func (*Ranking_UserList) ProtoMessage()    {}

func init() {
}

// Client API for RankingService service

type RankingServiceClient interface {
	RankChange(ctx context.Context, in *Ranking_Change, opts ...grpc.CallOption) (*Ranking_NullResult, error)
	DeleteSet(ctx context.Context, in *Ranking_SetName, opts ...grpc.CallOption) (*Ranking_NullResult, error)
	DeleteUser(ctx context.Context, in *Ranking_UserId, opts ...grpc.CallOption) (*Ranking_NullResult, error)
	QueryRankRange(ctx context.Context, in *Ranking_Range, opts ...grpc.CallOption) (*Ranking_RankList, error)
	QueryUsers(ctx context.Context, in *Ranking_Users, opts ...grpc.CallOption) (*Ranking_UserList, error)
}

type rankingServiceClient struct {
	cc *grpc.ClientConn
}

func NewRankingServiceClient(cc *grpc.ClientConn) RankingServiceClient {
	return &rankingServiceClient{cc}
}

func (c *rankingServiceClient) RankChange(ctx context.Context, in *Ranking_Change, opts ...grpc.CallOption) (*Ranking_NullResult, error) {
	out := new(Ranking_NullResult)
	err := grpc.Invoke(ctx, "/proto.RankingService/RankChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteSet(ctx context.Context, in *Ranking_SetName, opts ...grpc.CallOption) (*Ranking_NullResult, error) {
	out := new(Ranking_NullResult)
	err := grpc.Invoke(ctx, "/proto.RankingService/DeleteSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteUser(ctx context.Context, in *Ranking_UserId, opts ...grpc.CallOption) (*Ranking_NullResult, error) {
	out := new(Ranking_NullResult)
	err := grpc.Invoke(ctx, "/proto.RankingService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) QueryRankRange(ctx context.Context, in *Ranking_Range, opts ...grpc.CallOption) (*Ranking_RankList, error) {
	out := new(Ranking_RankList)
	err := grpc.Invoke(ctx, "/proto.RankingService/QueryRankRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) QueryUsers(ctx context.Context, in *Ranking_Users, opts ...grpc.CallOption) (*Ranking_UserList, error) {
	out := new(Ranking_UserList)
	err := grpc.Invoke(ctx, "/proto.RankingService/QueryUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RankingService service

type RankingServiceServer interface {
	RankChange(context.Context, *Ranking_Change) (*Ranking_NullResult, error)
	DeleteSet(context.Context, *Ranking_SetName) (*Ranking_NullResult, error)
	DeleteUser(context.Context, *Ranking_UserId) (*Ranking_NullResult, error)
	QueryRankRange(context.Context, *Ranking_Range) (*Ranking_RankList, error)
	QueryUsers(context.Context, *Ranking_Users) (*Ranking_UserList, error)
}

func RegisterRankingServiceServer(s *grpc.Server, srv RankingServiceServer) {
	s.RegisterService(&_RankingService_serviceDesc, srv)
}

func _RankingService_RankChange_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Ranking_Change)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RankingServiceServer).RankChange(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RankingService_DeleteSet_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Ranking_SetName)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RankingServiceServer).DeleteSet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RankingService_DeleteUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Ranking_UserId)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RankingServiceServer).DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RankingService_QueryRankRange_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Ranking_Range)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RankingServiceServer).QueryRankRange(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RankingService_QueryUsers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Ranking_Users)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RankingServiceServer).QueryUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RankingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RankingService",
	HandlerType: (*RankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RankChange",
			Handler:    _RankingService_RankChange_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _RankingService_DeleteSet_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RankingService_DeleteUser_Handler,
		},
		{
			MethodName: "QueryRankRange",
			Handler:    _RankingService_QueryRankRange_Handler,
		},
		{
			MethodName: "QueryUsers",
			Handler:    _RankingService_QueryUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
